cd nomePasta 								-> Navega até a pasta de destino
git init 								-> Inicializa o repositório / Cria um repositório do git
git config --global user.email "e-mail da minha conta do git" 		-> É necessário para dar o commit
git config --global user.name "Meu nome" 				-> É necessário para dar o commit
git status 								-> Exibe as alterações
git rm <file> 								-> Deleta um arquivo
git add "nomeArquivo" ou git add . 					-> Adiciona as alterações ao controle de versionamento
git restore --staged <file>						-> Retira um arquivo da área de staged (inverso do git add <file>)
git commit -m "Mensagem do commit" 					-> Cria uma versão do código
git remote add origin <url> 						-> Faz a conexão com um repositório no GitHub
git remote -v 								-> Mostra todas as conexões
git remote rm <remote> 							-> Deleta uma conexão com um repositório
git pull								-> Atualiza as informações locais com as do repositório
git push --set-upstream <remote> <branch> 				-> Indica para qual branch enviar a versão do código 
git push <remote> <branch> 						-> Envia a versão do código para o repositório e branch indicados
git reflog								-> Mostra o histórico de versões (commits)
git reset --hard <ID da versão>						-> Volta para uma versão a apartir do seu ID (git reflog exbibe o ID das versões)
git branch <nome>							git-> Cria uma branch
git branch								-> Lista as branchs 
git checkout <nome da branch>						-> Troca de branch
Para mesclar duas branchs:
- git pull da branch principal
- gerar uma nova branch a partir da branch principal
- trabalhar e adicionar novas funcionalidade na nova branch que criou
- finalizar o trabalho na branch temporária (add, commit, push)
- git checkout na branch principal
- git pull
- Mergiar (git merge <nome da branch>) o código da branch temporária com a branch principal (depois de testar e ver se funciona, claro)
- git push da branch principal
git checkout -b <nome da nova branch> <nome da branch base>		-> Cria uma nova branch contendo todo o conteúdo da branch base